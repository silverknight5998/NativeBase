{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","text","isArray","every","isObject","join","toUpper","_root","c","propTypes","PropTypes","bool","style","object","defaultProps","AnimatedText","StyledText"],"mappings":"m1BAAA,4B;AACA;AACA,8B;;AAEA;AACA;AACA,mE;;AAEMA,I;AACK;;;;AAIH,KAAKC,KAJF,CAELC,SAFK,QAELA,SAFK,CAGLC,QAHK,QAGLA,QAHK;;AAMP,GAAIC,YAAJ;AACA,GAAI,iBAAEC,OAAF,CAAUF,QAAV,GAAuB,CAAC,iBAAEG,KAAF,CAAQH,QAAR,CAAkB,iBAAEI,QAApB,CAA5B,CAA2D;;;AAGzDH,KAAO,iBAAEI,IAAF,CAAOL,QAAP,CAAiB,EAAjB,CAAP;AACD,CAJD,IAIO;AACLC,KAAOD,QAAP;AACD;;AAED,GAAID,SAAJ,CAAe;AACbE,KAAO,iBAAEK,OAAF,CAAUL,IAAV,CAAP;AACD;;AAED;AACE,0DAAQ,IAAK,sBAAM,QAAKM,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKV,KAA7C;AACGG,IADH,CADF;;;AAKD,C;;;AAGHJ,KAAKY,SAAL;AACK,kBAAOA,SADZ;AAEEV,UAAW,gBAAMW,SAAN,CAAgBC,IAF7B;AAGEC,MAAO,gBAAMF,SAAN,CAAgBG,MAHzB;;;AAMAhB,KAAKiB,YAAL,CAAoB;AAClBf,UAAW,KADO,CAApB;;;AAIA,GAAMgB,cAAe,gCAAiBlB,IAAjB,CAArB;AACA,GAAMmB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC;AACjBnB,IADiB,CAAnB,C;;;AAIuBA,I,CAAdmB,U","file":"Text.js","sourcesContent":["import React, { Component } from 'react';\nimport { Text as RNText } from 'react-native';\nimport _ from 'lodash';\n\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport { connectAnimation } from '@shoutem/animation';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass Text extends Component {\n  render() {\n    const {\n      uppercase,\n      children,\n    } = this.props;\n\n    let text;\n    if (_.isArray(children) && !_.every(children, _.isObject)) {\n      // children ['a', 'b'] => iOS: ab, Android: a,b\n      // prevent comma in android\n      text = _.join(children, '');\n    } else {\n      text = children;\n    }\n\n    if (uppercase) {\n      text = _.toUpper(text);\n    }\n\n    return (\n      <RNText ref={c => (this._root = c)} {...this.props}>\n        {text}\n      </RNText>\n    );\n  }\n}\n\nText.propTypes = {\n  ...RNText.propTypes,\n  uppercase: React.PropTypes.bool,\n  style: React.PropTypes.object,\n};\n\nText.defaultProps = {\n  uppercase: false,\n};\n\nconst AnimatedText = connectAnimation(Text);\nconst StyledText = connectStyle('NativeBase.Text', {}, mapPropsToStyleNames)(\n  Text\n);\n\nexport { StyledText as Text };\n"]}