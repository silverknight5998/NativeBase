{"version":3,"sources":["../../../src/basic/ToastContainer.js"],"names":["ToastContainer","config","toastInstance","_root","showToast","getModalState","closeToast","props","state","modalVisible","fadeAnim","Animated","Value","position","opacity","width","elevation","paddingHorizontal","Platform","OS","top","getTop","undefined","bottom","buttonText","trim","length","setState","text","getButtonText","type","supportedOrientations","style","buttonTextStyle","buttonStyle","textStyle","onClose","closeTimeout","clearTimeout","duration","setTimeout","bind","timing","toValue","start","reason","closeModal","getToastStyle","Component","propTypes","ViewPropTypes","PropTypes","oneOfType","object","number","array","StyledToastContainer","mapPropsToStyleNames"],"mappings":"u2BACA,4B,2CACA,qC,mDACA,yCACA,iEAEA,mE,yEAEA,4BACA,gCACA,8B,ykCAGMA,e,kIAGuB,IAAVC,OAAU,mCACzB,KAAKC,aAAL,CAAmBC,KAAnB,CAAyBC,SAAzB,CAAmC,CAAEH,aAAF,CAAnC,EACD,C,mCACa,CACZ,GAAI,KAAKC,aAAL,CAAmBC,KAAnB,CAAyBE,aAAzB,EAAJ,CAA8C,CAC5C,KAAKH,aAAL,CAAmBC,KAAnB,CAAyBG,UAAzB,CAAoC,cAApC,EACD,CACF,C,IACD,wBAAYC,KAAZ,CAAmB,4JACXA,KADW,GAEjB,MAAKC,KAAL,CAAa,CACXC,aAAc,KADH,CAEXC,SAAU,GAAIC,uBAASC,KAAb,CAAmB,CAAnB,CAFC,CAAb,CAFiB,aAMlB,C,gFACe,CACd,MAAO,CACLC,SAAU,UADL,CAELC,QAAS,KAAKN,KAAL,CAAWE,QAFf,CAGLK,MAAO,MAHF,CAILC,UAAW,CAJN,CAKLC,kBAAmBC,sBAASC,EAAT,GAAgB,KAAhB,CAAwB,EAAxB,CAA6B,CAL3C,CAMLC,IAAK,KAAKZ,KAAL,CAAWK,QAAX,GAAwB,KAAxB,CAAgC,KAAKQ,MAAL,EAAhC,CAAgDC,SANhD,CAOLC,OAAQ,KAAKf,KAAL,CAAWK,QAAX,GAAwB,QAAxB,CAAmC,KAAKQ,MAAL,EAAnC,CAAmDC,SAPtD,CAAP,CASD,C,uCACQ,CACP,GAAIJ,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CACzB,MAAO,GAAP,CACD,CACD,MAAO,EAAP,CAED,C,oDACaK,U,CAAY,CACxB,GAAIA,UAAJ,CAAgB,CACd,GAAIA,WAAWC,IAAX,GAAkBC,MAAlB,GAA6B,CAAjC,CAAoC,CAClC,MAAOJ,UAAP,CACD,CAAC,MAAOE,WAAP,CACH,CACD,MAAOF,UAAP,CACD,C,qDACe,CACd,MAAO,MAAKd,KAAL,CAAWC,YAAlB,CACD,C,kDACqB,IAAVR,OAAU,OAAVA,MAAU,CACpB,KAAK0B,QAAL,CAAc,CACZlB,aAAc,IADF,CAEZmB,KAAM3B,OAAO2B,IAFD,CAGZJ,WAAY,KAAKK,aAAL,CAAmB5B,OAAOuB,UAA1B,CAHA,CAIZM,KAAM7B,OAAO6B,IAJD,CAKZjB,SAAUZ,OAAOY,QAAP,CAAkBZ,OAAOY,QAAzB,CAAoC,QALlC,CAMZkB,sBAAuB9B,OAAO8B,qBANlB,CAOZC,MAAO/B,OAAO+B,KAPF,CAQZC,gBAAiBhC,OAAOgC,eARZ,CASZC,YAAajC,OAAOiC,WATR,CAUZC,UAAWlC,OAAOkC,SAVN,CAWZC,QAASnC,OAAOmC,OAXJ,CAAd,EAcA,GAAI,KAAKC,YAAT,CAAuB,CACrBC,aAAa,KAAKD,YAAlB,EACD,CAED,GAAIpC,OAAOsC,QAAP,GAAoB,CAAxB,CAA2B,CACzB,GAAMA,UAAWtC,OAAOsC,QAAP,CAAkB,CAAlB,CAAsBtC,OAAOsC,QAA7B,CAAwC,IAAzD,CACA,KAAKF,YAAL,CAAoBG,WAClB,KAAKlC,UAAL,CAAgBmC,IAAhB,CAAqB,IAArB,CAA2B,SAA3B,CADkB,CAElBF,QAFkB,CAApB,CAID,CAED5B,sBAAS+B,MAAT,CAAgB,KAAKlC,KAAL,CAAWE,QAA3B,CAAqC,CACnCiC,QAAS,CAD0B,CAEnCJ,SAAU,GAFyB,CAArC,EAGGK,KAHH,GAID,C,8CACUC,M,CAAQ,CACjB,KAAKlB,QAAL,CAAc,CACZlB,aAAc,KADF,CAAd,EADiB,GAIT2B,QAJS,CAIG,KAAK5B,KAJR,CAIT4B,OAJS,CAKjB,GAAIA,SAAW,MAAOA,QAAP,GAAmB,UAAlC,CAA8C,CAC5CA,QAAQS,MAAR,EACD,CACF,C,8CACUA,M,CAAQ,CACjBP,aAAa,KAAKD,YAAlB,EACA1B,sBAAS+B,MAAT,CAAgB,KAAKlC,KAAL,CAAWE,QAA3B,CAAqC,CACnCiC,QAAS,CAD0B,CAEnCJ,SAAU,GAFyB,CAArC,EAGGK,KAHH,CAGS,KAAKE,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAA2BI,MAA3B,CAHT,EAID,C,uCACQ,iBACP,GAAI,KAAKrC,KAAL,CAAWC,YAAf,CAA6B,CAC3B,MACE,+BAAC,qBAAD,CAAU,IAAV,EAAe,MAAO,KAAKsC,aAAL,EAAtB,kDACE,8BAAC,YAAD,EACE,MAAO,KAAKvC,KAAL,CAAWwB,KADpB,CAEE,OAAQ,KAAKxB,KAAL,CAAWsB,IAAX,GAAoB,QAF9B,CAGE,QAAS,KAAKtB,KAAL,CAAWsB,IAAX,GAAoB,SAH/B,CAIE,QAAS,KAAKtB,KAAL,CAAWsB,IAAX,GAAoB,SAJ/B,kDAME,8BAAC,UAAD,EAAM,MAAO,KAAKtB,KAAL,CAAW2B,SAAxB,kDAAoC,KAAK3B,KAAL,CAAWoB,IAA/C,CANF,CAOG,KAAKpB,KAAL,CAAWgB,UAAX,EACC,8BAAC,cAAD,EACE,MAAO,KAAKhB,KAAL,CAAW0B,WADpB,CAEE,QAAS,yBAAM,QAAK5B,UAAL,CAAgB,MAAhB,CAAN,EAFX,kDAIE,8BAAC,UAAD,EAAM,MAAO,KAAKE,KAAL,CAAWyB,eAAxB,kDACG,KAAKzB,KAAL,CAAWgB,UADd,CAJF,CARJ,CADF,CADF,CAsBD,CAAC,MAAO,KAAP,CACH,C,4BAxH0BwB,gB,EA2H7BhD,eAAeiD,SAAf,aACKC,0BADL,EAEElB,MAAOmB,oBAAUC,SAAV,CAAoB,CACzBD,oBAAUE,MADe,CAEzBF,oBAAUG,MAFe,CAGzBH,oBAAUI,KAHe,CAApB,CAFT,GASA,GAAMC,sBAAuB,yCAC3B,2BAD2B,CAE3B,EAF2B,CAG3BC,8BAH2B,EAI3BzD,cAJ2B,CAA7B,C,QAMiCA,c,CAAxBwD,oB","file":"ToastContainer.js","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform, Animated, ViewPropTypes } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nimport { Text } from './Text';\nimport { Button } from './Button';\nimport { Toast } from './Toast';\n\n\nclass ToastContainer extends Component {\n  \n  static toastInstance;\n  static show({ ...config }) {\n    this.toastInstance._root.showToast({ config });\n  }\n  static hide() {\n    if (this.toastInstance._root.getModalState()) {\n      this.toastInstance._root.closeToast('functionCall');\n    }\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      fadeAnim: new Animated.Value(0)\n    };\n  }\n  getToastStyle() {\n    return {\n      position: 'absolute',\n      opacity: this.state.fadeAnim,\n      width: '100%',\n      elevation: 9,\n      paddingHorizontal: Platform.OS === 'ios' ? 20 : 0,\n      top: this.state.position === 'top' ? this.getTop() : undefined,\n      bottom: this.state.position === 'bottom' ? this.getTop() : undefined\n    };\n  }\n  getTop() {\n    if (Platform.OS === 'ios') {\n      return 30;\n    } \n    return 0;\n    \n  }\n  getButtonText(buttonText) {\n    if (buttonText) {\n      if (buttonText.trim().length === 0) {\n        return undefined;\n      } return buttonText;\n    }\n    return undefined;\n  }\n  getModalState() {\n    return this.state.modalVisible;\n  }\n  showToast({ config }) {\n    this.setState({\n      modalVisible: true,\n      text: config.text,\n      buttonText: this.getButtonText(config.buttonText),\n      type: config.type,\n      position: config.position ? config.position : 'bottom',\n      supportedOrientations: config.supportedOrientations,\n      style: config.style,\n      buttonTextStyle: config.buttonTextStyle,\n      buttonStyle: config.buttonStyle,\n      textStyle: config.textStyle,\n      onClose: config.onClose\n    });\n    // If we have a toast already open, cut off its close timeout so that it won't affect *this* toast.\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n    }\n    // Set the toast to close after the duration.\n    if (config.duration !== 0) {\n      const duration = config.duration > 0 ? config.duration : 1500;\n      this.closeTimeout = setTimeout(\n        this.closeToast.bind(this, 'timeout'),\n        duration\n      );\n    }\n    // Fade the toast in now.\n    Animated.timing(this.state.fadeAnim, {\n      toValue: 1,\n      duration: 200\n    }).start();\n  }\n  closeModal(reason) {\n    this.setState({\n      modalVisible: false\n    });\n    const { onClose } = this.state;\n    if (onClose && typeof onClose === 'function') {\n      onClose(reason);\n    }\n  }\n  closeToast(reason) {\n    clearTimeout(this.closeTimeout);\n    Animated.timing(this.state.fadeAnim, {\n      toValue: 0,\n      duration: 200\n    }).start(this.closeModal.bind(this, reason));\n  }\n  render() {\n    if (this.state.modalVisible) {\n      return (\n        <Animated.View style={this.getToastStyle()}>\n          <Toast\n            style={this.state.style}\n            danger={this.state.type === 'danger'}\n            success={this.state.type === 'success'}\n            warning={this.state.type === 'warning'}\n          >\n            <Text style={this.state.textStyle}>{this.state.text}</Text>\n            {this.state.buttonText && (\n              <Button\n                style={this.state.buttonStyle}\n                onPress={() => this.closeToast('user')}\n              >\n                <Text style={this.state.buttonTextStyle}>\n                  {this.state.buttonText}\n                </Text>\n              </Button>\n            )}\n          </Toast>\n        </Animated.View>\n      );\n    } return null;\n  }\n}\n\nToastContainer.propTypes = {\n  ...ViewPropTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ])\n};\n\nconst StyledToastContainer = connectStyle(\n  'NativeBase.ToastContainer',\n  {},\n  mapPropsToStyleNames\n)(ToastContainer);\n\nexport { StyledToastContainer as ToastContainer };\n"]}