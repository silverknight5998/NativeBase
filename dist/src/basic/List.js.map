{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","props","ds","DataSource","rowHasChanged","r1","r2","state","dataSource","cloneWithRows","dataArray","nextProps","setState","childrenArray","Children","map","children","child","renderRow","_root","c","renderChildren","StyledList"],"mappings":"8yBAAA,4B;AACA;;AAEA;AACA,mE;;AAEMA,I;;AAEJ,cAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAAEC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAAjB,CAAxB,CAAX;AACA,MAAKC,KAAL,CAAa;AACXC,WAAYN,GAAGO,aAAH,CAAiB,MAAKR,KAAL,CAAWS,SAA5B,CADD,CAAb,CAHiB;;AAMlB,C;AACyBC,S,CAAW;AACnC,GAAMT,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAAEC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAAjB,CAAxB,CAAX;AACA,KAAKM,QAAL,CAAc;AACZJ,WAAYN,GAAGO,aAAH,CAAiBE,UAAUD,SAA3B,CADA,CAAd;;AAGD,C;AACgB;AACf,GAAMG,eAAgB,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKd,KAAL,CAAWe,QAA9B,CAAwC,sBAASC,MAAT,EAAxC,CAAtB;;AAEA,MAAOJ,cAAP;AACD,C;;AAEQ;AACP,GAAI,KAAKZ,KAAL,CAAWS,SAAX,EAAwB,KAAKT,KAAL,CAAWiB,SAAvC,CAAkD;AAChD;AACE;AACM,KAAKjB,KADX;AAEE,wBAFF;AAGE,WAAY,KAAKM,KAAL,CAAWC,UAHzB;AAIE,UAAW,KAAKP,KAAL,CAAWiB,SAJxB,GADF;;;AAQD;AACD;AACE,0DAAM,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKnB,KAAzC;AACG,KAAKoB,cAAL,EADH,CADF;;;AAKD,C;;;AAGH,GAAMC,YAAa,wBAAa,iBAAb,CAAgC,EAAhC,iCAA0DtB,IAA1D,CAAnB,C;;;AAGgBA,I,CAAdsB,U","file":"List.js","sourcesContent":["import React, { Component } from 'react';\nimport { ListView, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass List extends Component {\n\n  constructor(props) {\n    super(props);\n    const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });\n    this.state = {\n      dataSource: ds.cloneWithRows(this.props.dataArray)\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });\n    this.setState({\n      dataSource: ds.cloneWithRows(nextProps.dataArray)\n    });\n  }\n  renderChildren() {\n    const childrenArray = React.Children.map(this.props.children, child => child);\n\n    return childrenArray;\n  }\n\n  render() {\n    if (this.props.dataArray && this.props.renderRow) {\n      return (\n        <ListView\n          {...this.props}\n          enableEmptySections\n          dataSource={this.state.dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => this._root = c} {...this.props} >\n        {this.renderChildren()}\n      </View>\n    );\n  }\n\n}\nconst StyledList = connectStyle('NativeBase.List', {}, mapPropsToStyleNames)(List);\n\nexport {\n  StyledList as List,\n};\n"]}