<<<<<<< HEAD
{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","OS","androidRipple","props","onPress","_root","c","children","androidRippleColor","Ripple","androidRippleColorDark","marginLeft","paddingLeft","propTypes","style","PropTypes","object","itemDivider","bool","button","StyledListItem"],"mappings":"kzBAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;AACK;AACP,GAAI,sBAASC,EAAT,GAAc,KAAd,EAAuB,mBAASC,aAAT,GAAyB,KAAhD,EAAyD,CAAC,KAAKC,KAAL,CAAWC,OAArE,EAAgF,sBAAS,SAAT,GAAuB,EAA3G,CAA+G;AAC7G;AACE;AACE,QAAS,KAAKD,KAAL,CAAWC,OADtB;AAEE,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EAFP;AAGE,cAAc,MAHhB;;AAKE,gDAAU,KAAKH,KAAf,CAAuB,KAAKA,KAAL,CAAWI,QAAlC,CALF,CADF;;;AASD,CAVD;AAWK;AACH;AACI,oEAAyB,IAAK,sBAAK,QAAKF,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKH,KAAL,CAAWC,OADxB;AAEI,WAAa,KAAKD,KAAL,CAAWK,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKN,KAAL,CAAWK,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAFlH;AAGI,iDAAM,MAAO,CAAEC,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACE,gDAAU,KAAKT,KAAf,CAAuB,KAAKA,KAAL,CAAWI,QAAlC,CADF,CAHJ,CADJ;;;;AASD;AACF,C;;;AAGHP,SAASa,SAAT;AACK,gCAAmBA,SADxB;AAEEC,MAAO,gBAAMC,SAAN,CAAgBC,MAFzB;AAGEC,YAAa,gBAAMF,SAAN,CAAgBG,IAH/B;AAIEC,OAAQ,gBAAMJ,SAAN,CAAgBG,IAJ1B;;;AAOA,GAAME,gBAAiB,wBAAa,qBAAb,CAAoC,EAApC,iCAA8DpB,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlBoB,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport { TouchableHighlight, Platform, TouchableNativeFeedback, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n  render() {\n    if (Platform.OS==='ios' || variable.androidRipple===false || !this.props.onPress || Platform['Version'] <= 21) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          ref={c => this._root = c}\n          underlayColor=\"#DDD\"\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </TouchableHighlight>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)}>\n              <View style={{ marginLeft: -17, paddingLeft: 17 }}>\n                <View {...this.props}>{this.props.children}</View>\n              </View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool,\n};\n\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\n\nexport {\n  StyledListItem as ListItem,\n};\n"]}
=======
{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","platformStyle","OS","androidRipple","props","onPress","_root","c","listBtnUnderlyColor","children","androidRippleColor","Ripple","androidRippleColorDark","contextTypes","PropTypes","object","propTypes","style","itemDivider","bool","button","StyledListItem"],"mappings":"kzBAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAIK;AACP,GAAMC,WAAa,KAAKC,OAAL,CAAaC,KAAd,CAAuB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAxE,mBAAlB;AACA,GAAMG,eAAgBH,UAAUG,aAAhC;;AAEA,GAAI,sBAASC,EAAT,GAAc,KAAd,EAAuB,mBAASC,aAAT,GAAyB,KAAhD,EAAyD,CAAC,KAAKC,KAAL,CAAWC,OAArE,EAAiF,sBAAS,SAAT,GAAuB,EAA5G,CAAgH;AAC9G;AACE;AACE,QAAS,KAAKD,KAAL,CAAWC,OADtB;AAEE,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EAFP;AAGE,cAAe,mBAASC,mBAH1B;;AAKE,gDAAU,KAAKJ,KAAf,CAAuB,KAAKA,KAAL,CAAWK,QAAlC,CALF,CADF;;;AASD,CAVD;AAWK;AACH;AACI,oEAAyB,IAAK,sBAAK,QAAKH,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKH,KAAL,CAAWC,OADxB;AAEI,WAAa,KAAKD,KAAL,CAAWM,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKP,KAAL,CAAWM,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAFlH;AAGI,gDAAU,KAAKR,KAAf,CAAuB,KAAKA,KAAL,CAAWK,QAAlC,CAHJ,CADJ;;;AAOD;AACF,C,wCA5BGZ,Q,CACGgB,Y,CAAe,CACpBb,MAAO,gBAAMc,SAAN,CAAgBC,MADH,C;;;AA8BxBlB,SAASmB,SAAT;AACK,gCAAmBA,SADxB;AAEEC,MAAO,gBAAMH,SAAN,CAAgBC,MAFzB;AAGEG,YAAa,gBAAMJ,SAAN,CAAgBK,IAH/B;AAIEC,OAAQ,gBAAMN,SAAN,CAAgBK,IAJ1B;;;AAOA,GAAME,gBAAiB,wBAAa,qBAAb,CAAoC,EAApC,iCAA8DxB,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlBwB,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport { TouchableHighlight, Platform, TouchableNativeFeedback, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n  static contextTypes = {\n    theme: React.PropTypes.object,\n  }\n  render() {\n    const variables = (this.context.theme) ? this.context.theme['@@shoutem.theme/themeStyle'].variables : variable;\n    const platformStyle = variables.platformStyle;\n    \n    if (Platform.OS==='ios' || variable.androidRipple===false || !this.props.onPress ||  Platform['Version'] <= 21) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          ref={c => this._root = c}\n          underlayColor={variable.listBtnUnderlyColor}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </TouchableHighlight>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)}>\n              <View {...this.props}>{this.props.children}</View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool,\n};\n\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\n\nexport {\n  StyledListItem as ListItem,\n};\n"]}
>>>>>>> 530e9ca279beb7cf748b37b9c37ccbba2f9e9ec1
