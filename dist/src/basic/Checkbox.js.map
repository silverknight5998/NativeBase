{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","props","color","checked","checkboxType","borderColor","checkStyle","borderRadius","getBorderRadius","getBorderColor","backgroundColor","checkboxBgColor","checkboxDefaultColor","CheckboxRadius","defaultProps","style","getInitialStyle","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEAEA,mE,yEACA,qD,iDACA,2DACA,mD,67BAEMA,S,0SAKYC,S,CAAW,YAC6B,KAAKC,KADlC,CACjBC,KADiB,QACjBA,KADiB,CACVC,OADU,QACVA,OADU,CACDC,YADC,QACDA,YADC,CACaC,WADb,QACaA,WADb,CAEzB,MAAO,CACLC,WAAY,CACVC,aAAe,KAAKC,eAAL,CAAqBJ,YAArB,CAAmCJ,SAAnC,CADL,CAEVK,YAAa,KAAKI,cAAL,CAAoBJ,WAApB,CAAgCH,KAAhC,CAAsCF,SAAtC,CAFH,CAGVU,gBACEP,UAAY,IAAZ,CACID,OAASF,UAAUW,eADvB,CAEIX,UAAUY,oBANN,CADP,CAAP,CAUD,C,sDAEcP,W,CAAaH,K,CAAOF,S,CACnC,CACE,GAAG,CAAC,CAACK,WAAL,CAAiB,CACf,MAAOA,YAAP,CACD,CACD,MAAOH,QAASF,UAAUW,eAA1B,CACD,C,wDAEeP,Y,CAAcJ,S,CAC9B,CACI,GAAGI,cAAgB,SAAnB,CAA6B,CAC3B,MAAO,GAAP,CACD,CACD,GAAGA,cAAgB,QAAnB,CAA4B,CAC1B,MAAO,EAAP,CACD,CACD,MAAOJ,WAAUa,cAAjB,CACH,C,0DAEgBb,S,CAAW,CAC1B,GAAMc,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBhB,SAArB,EAAgCM,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKL,KAAlB,CAAyBa,YAAzB,CAAP,CACD,C,uCACQ,oBACCX,QADD,CACa,KAAKF,KADlB,CACCE,OADD,CAEP,GAAMH,WAAY,KAAKiB,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDlB,SADnC,CAEdmB,kBAFJ,CAGA,GAAMC,eAAgBpB,UAAUoB,aAAhC,CACA,GAAMC,UAAWrB,UAAUqB,QAA3B,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsBxB,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLE,MACEC,UAAY,IAAZ,CACIH,UAAUyB,iBADd,CAEIzB,UAAUY,oBAJX,CAKLc,SAAU1B,UAAU2B,gBALf,CAMLC,WAAY5B,UAAU6B,gBANjB,CAOLC,UAAW9B,UAAU+B,qBAPhB,CAQLC,iBAAkBhC,UAAUiC,wBARvB,CADT,CAWE,KACEZ,WAAaa,sBAASC,GAAtB,EAA6Bf,gBAAkBc,sBAASE,QAAxD,CACI,eADJ,CAEI,cAdR,iDAJF,CADF,CAwBD,C,sBA5EoBC,gB,EAAjBtC,Q,CACGuC,Y,CAAe,CACpBpB,MAAOqB,oBAAUC,MADG,C,CA8ExBzC,SAAS0C,SAAT,aACKC,8BAAiBD,SADtB,EAEE1B,MAAOwB,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOE1C,QAASoC,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,GAWA,GAAMC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBnD,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBkD,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked, checkboxType, borderColor } = this.props;\n    return {\n      checkStyle: {\n        borderRadius : this.getBorderRadius(checkboxType, variables),\n        borderColor: this.getBorderColor(borderColor,color,variables), \n        backgroundColor: \n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  getBorderColor(borderColor, color, variables)\n  {\n    if(!!borderColor){\n      return borderColor;\n    }\n    return color || variables.checkboxBgColor;\n  }\n\n  getBorderRadius(checkboxType, variables)\n  {\n      if(checkboxType == \"rounded\"){\n        return 13;\n      }\n      if(checkboxType == \"square\"){\n        return 0;\n      }\n      return variables.CheckboxRadius;\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}