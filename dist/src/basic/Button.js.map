{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","OS","androidRipple","prepareRootProps","_root","c","activeOpacity","alignSelf","zIndex","badgeValue","backgroundColor","badgeColor","badgeValueStyle","children","onPress","androidRippleColor","Ripple","propTypes","PropTypes","object","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","string","StyledButton"],"mappings":"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","file":"Button.js","sourcesContent":["/* @flow */\n\n\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from 'react-native';\nimport { connectStyle } from '@shoutem/theme';\nimport variables from '../theme/variables';\nimport { Badge } from './Badge';\nimport { Text } from './Text';\nimport computeProps from '../Utils/computeProps';\nimport variable from '../theme/variables';\n\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass Button extends Component {\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: (this.props.bordered) ? 1 : undefined,\n        borderRadius: (this.props.rounded && this.props.bordered) ? variables.borderRadiusLarge : 2,\n      },\n    };\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    if (Platform.OS==='ios' || variable.androidRipple===false) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => this._root = c}\n          activeOpacity={(this.props.activeOpacity) ? this.props.activeOpacity : 0.5}\n        >\n          <View style={(Platform.OS === 'ios') ? { alignSelf: 'center', zIndex: 999 } : { alignSelf: 'center' }}>{(this.props.badgeValue) ? <Badge style={{ backgroundColor: (this.props.badgeColor) ? this.props.badgeColor : undefined }}><Text style={this.props.badgeValueStyle}>{this.props.badgeValue}</Text></Badge> : null}</View>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColor)}>\n              <View {...this.prepareRootProps()}>\n                  {this.props.children}\n              </View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: React.PropTypes.object,\n  block: React.PropTypes.bool,\n  primary: React.PropTypes.bool,\n  transparent: React.PropTypes.bool,\n  success: React.PropTypes.bool,\n  danger: React.PropTypes.bool,\n  warning: React.PropTypes.bool,\n  info: React.PropTypes.bool,\n  bordered: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n  rounded: React.PropTypes.bool,\n  large: React.PropTypes.bool,\n  small: React.PropTypes.bool,\n  active: React.PropTypes.bool,\n  badgeColor: React.PropTypes.string,\n  badgeValueStyle: React.PropTypes.object,\n};\n\n\nconst StyledButton = connectStyle('NativeBase.Button', {}, mapPropsToStyleNames)(Button);\nexport {\n  StyledButton as Button,\n};\n"]}