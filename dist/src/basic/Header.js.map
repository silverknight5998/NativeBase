{"version":3,"sources":["../../../src/basic/Header.js"],"names":["Header","props","state","orientation","val","maxComp","Math","max","deviceWidth","deviceHeight","width","setState","mode","inSet","inset","undefined","Inset","InsetValues","portrait","landscape","oldHeight","style","height","topInset","topPadder","padding","paddingTop","variables","context","theme","platformStyle","layoutChange","e","nativeEvent","layout","androidStatusBarColor","statusBarColor","iosBarStyle","iosStatusbar","isIphoneX","_root","c","calculateHeight","calculatePadder","contextTypes","object","propTypes","oneOfType","number","array","searchBar","bool","rounded","StyledHeader"],"mappings":"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","file":"Header.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, StatusBar, ViewPropTypes } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport _ from \"lodash\";\nclass Header extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      orientation: \"portrait\"\n    };\n  }\n  layoutChange(val) {\n    let maxComp = Math.max(variable.deviceWidth, variable.deviceHeight);\n    if (val.width >= maxComp) this.setState({ orientation: \"landscape\" });\n    else {\n      this.setState({ orientation: \"portrait\" });\n    }\n  }\n  calculateHeight(mode, inSet) {\n    let inset = null;\n    if (inSet != undefined) {\n      inset = inSet;\n    } else {\n      inset = variable.Inset;\n    }\n    const InsetValues = mode === \"portrait\" ? inset.portrait : inset.landscape;\n    let oldHeight = null;\n    if (this.props.style.height != undefined) {\n      oldHeight = this.props.style.height;\n    } else if (this.props.style[1].height) {\n      oldHeight = this.props.style[1].height;\n    } else {\n      oldHeight = this.props.style[0].height;\n    }\n    let height = oldHeight + InsetValues.topInset;\n    return height;\n  }\n  calculatePadder(mode, inSet) {\n    let inset = null;\n    if (inSet != undefined) {\n      inset = inSet;\n    } else {\n      inset = variable.Inset;\n    }\n    const InsetValues = mode === \"portrait\" ? inset.portrait : inset.landscape;\n    let topPadder = null;\n    if (this.props.style[1] !== undefined) {\n      if (\n        this.props.style[1].padding !== undefined ||\n        this.props.style[1].paddingTop !== undefined\n      ) {\n        topPadder =\n          (this.props.style[1].paddingTop\n            ? this.props.style[1].paddingTop\n            : this.props.style[1].padding) + InsetValues.topInset;\n      }\n    } else if (\n      this.props.style.padding !== undefined &&\n      this.props.style.paddingTop !== undefined\n    ) {\n      topPadder =\n        (this.props.style.paddingTop\n          ? this.props.style.paddingTop\n          : this.props.style.padding) + InsetValues.topInset;\n    } else {\n      topPadder = InsetValues.topInset;\n    }\n    return topPadder;\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    return (\n      <View onLayout={e => this.layoutChange(e.nativeEvent.layout)}>\n        <StatusBar\n          backgroundColor={\n            this.props.androidStatusBarColor\n              ? this.props.androidStatusBarColor\n              : variables.statusBarColor\n          }\n          barStyle={\n            this.props.iosBarStyle\n              ? this.props.iosBarStyle\n              : platformStyle === \"material\"\n                ? \"light-content\"\n                : variables.iosStatusbar\n          }\n        />\n        {variable.isIphoneX ? (\n          <View\n            ref={c => (this._root = c)}\n            {...this.props}\n            style={[\n              this.props.style,\n              {\n                height: this.calculateHeight(\n                  this.state.orientation,\n                  variables.Inset\n                ),\n                paddingTop: this.calculatePadder(\n                  this.state.orientation,\n                  variables.Inset\n                )\n              }\n            ]}\n          />\n        ) : (\n          <View ref={c => (this._root = c)} {...this.props} />\n        )}\n      </View>\n    );\n  }\n}\n\nHeader.propTypes = {\n  ...ViewPropTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  searchBar: PropTypes.bool,\n  rounded: PropTypes.bool\n};\n\nconst StyledHeader = connectStyle(\n  \"NativeBase.Header\",\n  {},\n  mapPropsToStyleNames\n)(Header);\nexport { StyledHeader as Header };\n"]}