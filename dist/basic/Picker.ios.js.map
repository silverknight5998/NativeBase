{"version":3,"sources":["../../basic/Picker.ios.js"],"names":["PickerNB","props","ds","DataSource","rowHasChanged","r1","r2","state","modalVisible","currentLabel","getLabel","dataSource","cloneWithRows","children","nextProps","nextLabel","setState","picker","pickerItem","visible","defaultProps","style","getInitialStyle","itemStyle","item","find","child","value","selectedValue","get","childrenArray","Children","toArray","headerComponent","newChildren","forEach","type","push","cloneElement","onPress","_setModalVisible","iosIcon","fontSize","lineHeight","color","modifyHeader","shadowOffset","shadowColor","shadowRadius","shadowOpacity","_root","c","undefined","renderIcon","renderHeader","onValueChange","current","label","Item","createClass","render","propTypes","StyledPickerNB"],"mappings":"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","file":"Picker.ios.js","sourcesContent":["/* @flow */\n\nimport React, { Component } from 'react';\nimport { Picker, Modal, View } from 'react-native';\nimport _ from 'lodash';\nimport { Text } from './Text';\nimport { List } from './LIst';\nimport { IconNB as Icon } from './IconNB';\nimport { Container } from './Container';\nimport { Content } from './Content';\nimport { ListItem } from './ListItem';\nimport { Button } from './Button';\nimport { Header } from './Header';\nimport { Title } from './Title';\nimport { Left } from './Left';\nimport { Right } from './Right';\nimport { Body } from './Body';\nimport { connectStyle } from '@shoutem/theme';\nimport computeProps from '../Utils/computeProps';\n\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass PickerNB extends Component {\n\n  constructor(props) {\n    super(props);\n    const ds = new List.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });\n    this.state = {\n      modalVisible: false,\n      currentLabel: this.getLabel(props),\n      dataSource: ds.cloneWithRows(this.props.children),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentLabel = this.state.currentLabel;\n    const nextLabel = this.getLabel(nextProps);\n\n    if (currentLabel !== nextLabel) {\n      this.setState({\n        currentLabel: nextLabel,\n      });\n    }\n  }\n\n  getInitialStyle() {\n    return {\n      picker: {\n                // alignItems: 'flex-end'\n      },\n      pickerItem: {\n\n      },\n    };\n  }\n  _setModalVisible(visible) {\n    this.setState({ modalVisible: visible });\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().picker,\n      itemStyle: this.getInitialStyle().pickerItem,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  getLabel(props) {\n    const item = _.find(props.children, child => child.props.value === props.selectedValue);\n\n    return _.get(item, 'props.label');\n  }\n\n  modifyHeader() {\n    const childrenArray = React.Children.toArray(this.props.headerComponent.props.children);\n    const newChildren = [];\n    childrenArray.forEach((child) => {\n      if (child.type === Button) {\n        newChildren.push(React.cloneElement(child,\n          { onPress: () => { this._setModalVisible(false); } }));\n      } else {\n        newChildren.push(child);\n      }\n    });\n    return <Header {...this.props.headerComponent.props} > {newChildren}</Header>;\n  }\n\n  renderIcon() {\n    return React.cloneElement(this.props.iosIcon, { style: { fontSize: 22, lineHeight: 26, color: '#7a7a7a' } });\n  }\n\n  renderHeader() {\n    return (this.props.headerComponent) ? this.modifyHeader() : (<Header >\n      <Left><Button\n        style={{ shadowOffset: null, shadowColor: null, shadowRadius: null, shadowOpacity: null }}\n        transparent onPress={() => { this._setModalVisible(false); }}\n      ><Text>Back</Text></Button></Left>\n      <Body><Title>Select One</Title></Body>\n      <Right />\n    </Header>);\n  }\n\n  render() {\n    return (\n      <View ref={c => this._root = c}>\n        <Button\n          style={{ shadowOffset: null, shadowColor: null, shadowRadius: null, shadowOpacity: null }}\n          transparent\n          onPress={() => { this._setModalVisible(true); }}\n        >\n          <Text>{this.state.currentLabel}</Text>\n          {(this.props.iosIcon === undefined) ? null : this.renderIcon()}\n        </Button>\n        <Modal\n          animationType=\"slide\"\n          transparent={false}\n          visible={this.state.modalVisible}\n          onRequestClose={() => { this._setModalVisible(false); }}\n        >\n          <Container>\n            {this.renderHeader()}\n            <Content>\n              <List\n                dataSource={this.state.dataSource}\n                renderRow={child =>\n                  <ListItem\n                    button\n                    onPress={() => {\n                      this._setModalVisible(false); this.props.onValueChange(child.props.value);\n                      this.setState({ current: child.props.label });\n                    }}\n                  >\n                    <Text >{child.props.label}</Text>\n                    <Right>\n                      {(child.props.value === this.props.selectedValue) ?\n                                        (<Icon name=\"ios-checkmark-outline\" />)\n                                        :\n                                        (<Icon name=\"ios-checkmark-outline\" style={{ color: 'transparent' }} />)\n                                    }\n                    </Right>\n                  </ListItem>\n                            }\n              />\n            </Content>\n          </Container>\n        </Modal>\n      </View>\n    );\n  }\n\n}\n\nPickerNB.Item = React.createClass({\n\n  render() {\n    return (\n      <Picker.Item {...this.props()} />\n    );\n  },\n});\n\nPickerNB.propTypes = {\n  ...View.propTypes,\n};\n\nconst StyledPickerNB = connectStyle('NativeBase.PickerNB', {}, mapPropsToStyleNames)(PickerNB);\n\nexport {\n  StyledPickerNB as PickerNB,\n};\n"]}